[gd_scene load_steps=12 format=2]

[ext_resource path="res://Assets/Textures/Backgrounds/battleBG.png" type="Texture" id=1]
[ext_resource path="res://Assets/StyleBoxes/BattleMenuTheme.tres" type="Theme" id=2]
[ext_resource path="res://Assets/Textures/UI/BattleMenuBG.png" type="Texture" id=3]
[ext_resource path="res://Assets/Textures/UI/Target_empty.png" type="Texture" id=4]
[ext_resource path="res://Assets/Textures/UI/HSeparator.png" type="Texture" id=5]
[ext_resource path="res://Src/Scenes/BattleScene.gd" type="Script" id=6]
[ext_resource path="res://Assets/Fonts/lazypixie.ttf" type="DynamicFontData" id=7]
[ext_resource path="res://Src/UIComponents/MapUI.tscn" type="PackedScene" id=8]

[sub_resource type="DynamicFont" id=1]
size = 10
outline_size = 2
outline_color = Color( 0.937255, 0.847059, 0.631373, 1 )
font_data = ExtResource( 7 )

[sub_resource type="Shader" id=2]
code = "/*
Godot 3 2D CRT Shader.
A 2D shader for Godot 3 simulating a CRT..

Author: hiulit
Repository: https://github.com/hiulit/Godot-3-2D-CRT-Shader
Issues: https://github.com/hiulit/Godot-3-2D-CRT-Shader/issues
License: MIT https://github.com/hiulit/Godot-3-2D-CRT-Shader/blob/master/LICENSE
*/

shader_type canvas_item;

const float PI = 3.14159265359;

uniform vec2 screen_size = vec2(320.0, 180.0);
uniform bool show_curvature = true;
uniform float curvature_x_amount : hint_range(3.0, 15.0, 0.01) = float(6.0); 
uniform float curvature_y_amount : hint_range(3.0, 15.0, 0.01) = float(4.0);
uniform vec4 corner_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform bool show_vignette = true;
uniform float vignette_opacity : hint_range(0.0, 1.0, 0.01) = 0.2;
uniform bool show_horizontal_scan_lines = true;
uniform float horizontal_scan_lines_amount : hint_range(0.0, 180.0, 0.1) = 180.0;
uniform float horizontal_scan_lines_opacity : hint_range(0.0, 1.0, 0.01) = 1.0;
uniform bool show_vertical_scan_lines = false;
uniform float vertical_scan_lines_amount : hint_range(0.0, 320.0, 0.1) = 320.0;
uniform float vertical_scan_lines_opacity : hint_range(0.0, 1.0, 0.01) = 1.0;
uniform float boost : hint_range(1.0, 2.0, 0.01) = 1.2;
uniform float aberration_amount : hint_range(0.0, 10.0, 0.01) = 0.0;

vec2 uv_curve(vec2 uv) {
	if (show_curvature) {
		uv = uv * 2.0 - 1.0;
		vec2 offset = abs(uv.yx) / vec2(curvature_x_amount, curvature_y_amount);
		uv = uv + uv * offset * offset;
		uv = uv * 0.5 + 0.5;
	}

	return uv;
}


void fragment() {
	vec2 uv = uv_curve(UV);
	vec2 screen_uv = uv_curve(SCREEN_UV);
	vec3 color = texture(SCREEN_TEXTURE, screen_uv).rgb;

	if (aberration_amount > 0.0) {
		float adjusted_amount = aberration_amount / screen_size.x;
		color.r = texture(SCREEN_TEXTURE, vec2(screen_uv.x + adjusted_amount, screen_uv.y)).r;
		color.g = texture(SCREEN_TEXTURE, screen_uv).g;
		color.b = texture(SCREEN_TEXTURE, vec2(screen_uv.x - adjusted_amount, screen_uv.y)).b;
	}

	if (show_vignette) {
		float vignette = uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y);
		vignette = clamp(pow((screen_size.x / 4.0) * vignette, vignette_opacity), 0.0, 1.0);
		color *= vignette;
	}

	if (show_horizontal_scan_lines) {
		float s = sin(screen_uv.y * horizontal_scan_lines_amount * PI * 2.0);
		s = (s * 0.5 + 0.5) * 0.9 + 0.1;
		vec4 scan_line = vec4(vec3(pow(s, horizontal_scan_lines_opacity)), 1.0);
		color *= scan_line.rgb;
	}

	if (show_vertical_scan_lines) {
		float s = sin(screen_uv.x * vertical_scan_lines_amount * PI * 2.0);
		s = (s * 0.5 + 0.5) * 0.9 + 0.1;
		vec4 scan_line = vec4(vec3(pow(s, vertical_scan_lines_opacity)), 1.0);
		color *= scan_line.rgb;
	}

	if (show_horizontal_scan_lines || show_vertical_scan_lines) {
		color *= boost;
	}

	// Fill the blank space of the corners, left by the curvature, with black.
	if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {
		color = corner_color.rgb;
	}

	COLOR = vec4(color, 1.0);
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/screen_size = Vector2( 320, 144 )
shader_param/show_curvature = true
shader_param/curvature_x_amount = 6.0
shader_param/curvature_y_amount = 4.0
shader_param/corner_color = Color( 0, 0, 0, 1 )
shader_param/show_vignette = true
shader_param/vignette_opacity = 0.2
shader_param/show_horizontal_scan_lines = true
shader_param/horizontal_scan_lines_amount = 180.0
shader_param/horizontal_scan_lines_opacity = 0.6
shader_param/show_vertical_scan_lines = false
shader_param/vertical_scan_lines_amount = 320.0
shader_param/vertical_scan_lines_opacity = 1.0
shader_param/boost = 1.2
shader_param/aberration_amount = 0.0

[node name="BattleScene" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = -720.0
margin_bottom = -432.0
script = ExtResource( 6 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="BG" type="TextureRect" parent="."]
margin_right = 40.0
margin_bottom = 40.0
texture = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MovementTween" type="Tween" parent="BG"]

[node name="Combatants" type="Node2D" parent="."]
z_as_relative = false

[node name="Positions" type="Node2D" parent="Combatants"]

[node name="PlayerPos1" type="Position2D" parent="Combatants/Positions"]
position = Vector2( 88, 92 )

[node name="PlayerPos2" type="Position2D" parent="Combatants/Positions"]
position = Vector2( 56, 92 )

[node name="PlayerPos3" type="Position2D" parent="Combatants/Positions"]
position = Vector2( 24, 92 )

[node name="EnemyPos1" type="Position2D" parent="Combatants/Positions"]
position = Vector2( 152, 92 )

[node name="EnemyPos2" type="Position2D" parent="Combatants/Positions"]
position = Vector2( 184, 92 )

[node name="EnemyPos3" type="Position2D" parent="Combatants/Positions"]
position = Vector2( 216, 92 )

[node name="PlayerSpawn" type="Position2D" parent="Combatants/Positions"]
position = Vector2( -40, 92 )

[node name="EnemySpawn" type="Position2D" parent="Combatants/Positions"]
position = Vector2( 280, 92 )

[node name="Entities" type="Node2D" parent="Combatants"]

[node name="Menu" type="TextureRect" parent="."]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_bottom = 37.0
mouse_filter = 2
theme = ExtResource( 2 )
texture = ExtResource( 3 )
stretch_mode = 4
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MenuHBox" type="HBoxContainer" parent="Menu"]
margin_left = 32.0
margin_top = 2.0
margin_right = 214.0
margin_bottom = 30.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Moves" type="VBoxContainer" parent="Menu/MenuHBox"]
margin_right = 53.0
margin_bottom = 28.0
rect_min_size = Vector2( 53, 28 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect" type="TextureRect" parent="Menu/MenuHBox"]
margin_left = 57.0
margin_right = 64.0
margin_bottom = 28.0
texture = ExtResource( 5 )

[node name="MoveDetails" type="VBoxContainer" parent="Menu/MenuHBox"]
margin_left = 68.0
margin_right = 128.0
margin_bottom = 28.0
rect_min_size = Vector2( 60, 0 )
custom_constants/separation = 3

[node name="DmgIndicator" type="HBoxContainer" parent="Menu/MenuHBox/MoveDetails"]
margin_right = 60.0
margin_bottom = 7.0

[node name="DmgLabel" type="Label" parent="Menu/MenuHBox/MoveDetails/DmgIndicator"]
margin_right = 18.0
margin_bottom = 7.0
text = "DMG:"
valign = 1

[node name="DmgValue" type="Label" parent="Menu/MenuHBox/MoveDetails/DmgIndicator"]
margin_left = 22.0
margin_right = 22.0
margin_bottom = 7.0

[node name="TargetIndicator" type="HBoxContainer" parent="Menu/MenuHBox/MoveDetails"]
margin_top = 10.0
margin_right = 60.0
margin_bottom = 17.0
custom_constants/separation = 3

[node name="TargetLabel" type="Label" parent="Menu/MenuHBox/MoveDetails/TargetIndicator"]
margin_right = 27.0
margin_bottom = 7.0
text = "Target:"

[node name="ReachPos1" type="TextureRect" parent="Menu/MenuHBox/MoveDetails/TargetIndicator"]
margin_left = 30.0
margin_right = 37.0
margin_bottom = 7.0
texture = ExtResource( 4 )

[node name="ReachPos2" type="TextureRect" parent="Menu/MenuHBox/MoveDetails/TargetIndicator"]
margin_left = 40.0
margin_right = 47.0
margin_bottom = 7.0
texture = ExtResource( 4 )

[node name="ReachPos3" type="TextureRect" parent="Menu/MenuHBox/MoveDetails/TargetIndicator"]
margin_left = 50.0
margin_right = 57.0
margin_bottom = 7.0
texture = ExtResource( 4 )

[node name="TypeIndicator" type="HBoxContainer" parent="Menu/MenuHBox/MoveDetails"]
margin_top = 20.0
margin_right = 60.0
margin_bottom = 27.0

[node name="TypeLabel" type="Label" parent="Menu/MenuHBox/MoveDetails/TypeIndicator"]
margin_right = 18.0
margin_bottom = 7.0
text = "Type:"

[node name="TypeValue" type="Label" parent="Menu/MenuHBox/MoveDetails/TypeIndicator"]
margin_left = 22.0
margin_right = 22.0
margin_bottom = 7.0

[node name="MoveEffect" type="VBoxContainer" parent="Menu/MenuHBox"]
margin_left = 132.0
margin_right = 186.0
margin_bottom = 28.0
rect_min_size = Vector2( 54, 0 )

[node name="EffectLabel" type="Label" parent="Menu/MenuHBox/MoveEffect"]
margin_right = 54.0
margin_bottom = 7.0
rect_min_size = Vector2( 0, 6 )
text = "Effect:"

[node name="EffectValue" type="RichTextLabel" parent="Menu/MenuHBox/MoveEffect"]
margin_top = 7.0
margin_right = 54.0
margin_bottom = 28.0
rect_min_size = Vector2( 0, 21 )
custom_constants/table_vseparation = 0
custom_constants/shadow_offset_x = 0
custom_constants/shadow_offset_y = 0
custom_constants/table_hseparation = 0
custom_constants/line_separation = 0
text = "LOREmIpsumsinevattelapescaetantecosebelle"
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="EnemyDetails" type="VBoxContainer" parent="Menu/MenuHBox"]
visible = false
margin_left = 64.0
margin_right = 124.0
margin_bottom = 28.0
rect_min_size = Vector2( 60, 0 )

[node name="EnemyMoves" type="VBoxContainer" parent="Menu/MenuHBox"]
visible = false
margin_left = 128.0
margin_right = 182.0
margin_bottom = 28.0
rect_min_size = Vector2( 54, 0 )

[node name="BattleHeadline" type="Node2D" parent="."]

[node name="Text" type="Label" parent="BattleHeadline"]
margin_top = -24.0
margin_right = 240.0
margin_bottom = -10.0
custom_fonts/font = SubResource( 1 )
custom_colors/font_color = Color( 0.164706, 0.113725, 0.0509804, 1 )
text = "RESULT"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Tween" type="Tween" parent="BattleHeadline"]

[node name="MapUI" parent="." instance=ExtResource( 8 )]
anchor_bottom = 0.0
margin_top = -64.0
margin_bottom = -64.0
mouse_filter = 2

[node name="MapTween" type="Tween" parent="MapUI"]

[node name="Writings" type="Node2D" parent="."]

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 2

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Camera2D" type="Camera2D" parent="."]
anchor_mode = 0
current = true
zoom = Vector2( 0.25, 0.25 )
